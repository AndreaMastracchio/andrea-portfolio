{"ast":null,"code":"'use strict';module.exports=haml;haml.displayName='haml';haml.aliases=[];function haml(Prism){/* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/;(function(Prism){Prism.languages.haml={// Multiline stuff should appear before the rest\n'multiline-comment':{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,lookbehind:true,alias:'comment'},'multiline-code':[{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,lookbehind:true,inside:{rest:Prism.languages.ruby}},{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,lookbehind:true,inside:{rest:Prism.languages.ruby}}],// See at the end of the file for known filters\nfilter:{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,lookbehind:true,inside:{'filter-name':{pattern:/^:[\\w-]+/,alias:'variable'}}},markup:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,lookbehind:true,inside:{rest:Prism.languages.markup}},doctype:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,lookbehind:true},tag:{// Allows for one nested group of braces\npattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,lookbehind:true,inside:{attributes:[{// Lookbehind tries to prevent interpolations from breaking it all\n// Allows for one nested group of braces\npattern:/(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,lookbehind:true,inside:{rest:Prism.languages.ruby}},{pattern:/\\([^)]+\\)/,inside:{'attr-value':{pattern:/(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,lookbehind:true},'attr-name':/[\\w:-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[=(),]/}},{pattern:/\\[[^\\]]+\\]/,inside:{rest:Prism.languages.ruby}}],punctuation:/[<>]/}},code:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,lookbehind:true,inside:{rest:Prism.languages.ruby}},// Interpolations in plain text\ninterpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:'punctuation'},rest:Prism.languages.ruby}},punctuation:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,lookbehind:true}};var filter_pattern='((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+';// Non exhaustive list of available filters and associated languages\nvar filters=['css',{filter:'coffee',language:'coffeescript'},'erb','javascript','less','markdown','ruby','scss','textile'];var all_filters={};for(var i=0,l=filters.length;i<l;i++){var filter=filters[i];filter=typeof filter==='string'?{filter:filter,language:filter}:filter;if(Prism.languages[filter.language]){all_filters['filter-'+filter.filter]={pattern:RegExp(filter_pattern.replace('{{filter_name}}',filter.filter)),lookbehind:true,inside:{'filter-name':{pattern:/^:[\\w-]+/,alias:'variable'},rest:Prism.languages[filter.language]}};}}Prism.languages.insertBefore('haml','filter',all_filters);})(Prism);}","map":{"version":3,"names":["module","exports","haml","displayName","aliases","Prism","languages","pattern","lookbehind","alias","inside","rest","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","filter_pattern","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/haml.js"],"sourcesContent":["'use strict'\n\nmodule.exports = haml\nhaml.displayName = 'haml'\nhaml.aliases = []\nfunction haml(Prism) {\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function(Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        },\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n              lookbehind: true,\n              inside: {\n                rest: Prism.languages.ruby\n              }\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: {\n                rest: Prism.languages.ruby\n              }\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', filter.filter)\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,IAAjB,CACAA,IAAI,CAACC,WAAL,CAAmB,MAAnB,CACAD,IAAI,CAACE,OAAL,CAAe,EAAf,CACA,QAASF,KAAT,CAAcG,KAAd,CAAqB,CACnB;AACF;AACA;AACA;AACA;AACA,EACE,CAAC,CAAC,SAASA,KAAT,CAAgB,CAChBA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAuB,CACrB;AACA,oBAAqB,CACnBK,OAAO,CAAE,gEADU,CAEnBC,UAAU,CAAE,IAFO,CAGnBC,KAAK,CAAE,SAHY,CAFA,CAOrB,iBAAkB,CAChB,CACEF,OAAO,CAAE,8GADX,CAEEC,UAAU,CAAE,IAFd,CAGEE,MAAM,CAAE,CACNC,IAAI,CAAEN,KAAK,CAACC,SAAN,CAAgBM,IADhB,CAHV,CADgB,CAQhB,CACEL,OAAO,CAAE,sFADX,CAEEC,UAAU,CAAE,IAFd,CAGEE,MAAM,CAAE,CACNC,IAAI,CAAEN,KAAK,CAACC,SAAN,CAAgBM,IADhB,CAHV,CARgB,CAPG,CAuBrB;AACAC,MAAM,CAAE,CACNN,OAAO,CAAE,iFADH,CAENC,UAAU,CAAE,IAFN,CAGNE,MAAM,CAAE,CACN,cAAe,CACbH,OAAO,CAAE,UADI,CAEbE,KAAK,CAAE,UAFM,CADT,CAHF,CAxBa,CAkCrBK,MAAM,CAAE,CACNP,OAAO,CAAE,2BADH,CAENC,UAAU,CAAE,IAFN,CAGNE,MAAM,CAAE,CACNC,IAAI,CAAEN,KAAK,CAACC,SAAN,CAAgBQ,MADhB,CAHF,CAlCa,CAyCrBC,OAAO,CAAE,CACPR,OAAO,CAAE,mCADF,CAEPC,UAAU,CAAE,IAFL,CAzCY,CA6CrBQ,GAAG,CAAE,CACH;AACAT,OAAO,CAAE,oGAFN,CAGHC,UAAU,CAAE,IAHT,CAIHE,MAAM,CAAE,CACNO,UAAU,CAAE,CACV,CACE;AACA;AACAV,OAAO,CAAE,iCAHX,CAIEC,UAAU,CAAE,IAJd,CAKEE,MAAM,CAAE,CACNC,IAAI,CAAEN,KAAK,CAACC,SAAN,CAAgBM,IADhB,CALV,CADU,CAUV,CACEL,OAAO,CAAE,WADX,CAEEG,MAAM,CAAE,CACN,aAAc,CACZH,OAAO,CAAE,yCADG,CAEZC,UAAU,CAAE,IAFA,CADR,CAKN,YAAa,2BALP,CAMNU,WAAW,CAAE,QANP,CAFV,CAVU,CAqBV,CACEX,OAAO,CAAE,YADX,CAEEG,MAAM,CAAE,CACNC,IAAI,CAAEN,KAAK,CAACC,SAAN,CAAgBM,IADhB,CAFV,CArBU,CADN,CA6BNM,WAAW,CAAE,MA7BP,CAJL,CA7CgB,CAiFrBC,IAAI,CAAE,CACJZ,OAAO,CAAE,yCADL,CAEJC,UAAU,CAAE,IAFR,CAGJE,MAAM,CAAE,CACNC,IAAI,CAAEN,KAAK,CAACC,SAAN,CAAgBM,IADhB,CAHJ,CAjFe,CAwFrB;AACAQ,aAAa,CAAE,CACbb,OAAO,CAAE,YADI,CAEbG,MAAM,CAAE,CACNW,SAAS,CAAE,CACTd,OAAO,CAAE,UADA,CAETE,KAAK,CAAE,aAFE,CADL,CAKNE,IAAI,CAAEN,KAAK,CAACC,SAAN,CAAgBM,IALhB,CAFK,CAzFM,CAmGrBM,WAAW,CAAE,CACXX,OAAO,CAAE,iCADE,CAEXC,UAAU,CAAE,IAFD,CAnGQ,CAAvB,CAwGA,GAAIc,eAAc,CAChB,uGADF,CAC0G;AAC1G,GAAIC,QAAO,CAAG,CACZ,KADY,CAEZ,CACEV,MAAM,CAAE,QADV,CAEEW,QAAQ,CAAE,cAFZ,CAFY,CAMZ,KANY,CAOZ,YAPY,CAQZ,MARY,CASZ,UATY,CAUZ,MAVY,CAWZ,MAXY,CAYZ,SAZY,CAAd,CAcA,GAAIC,YAAW,CAAG,EAAlB,CACA,IAAK,GAAIC,EAAC,CAAG,CAAR,CAAWC,CAAC,CAAGJ,OAAO,CAACK,MAA5B,CAAoCF,CAAC,CAAGC,CAAxC,CAA2CD,CAAC,EAA5C,CAAgD,CAC9C,GAAIb,OAAM,CAAGU,OAAO,CAACG,CAAD,CAApB,CACAb,MAAM,CACJ,MAAOA,OAAP,GAAkB,QAAlB,CACI,CACEA,MAAM,CAAEA,MADV,CAEEW,QAAQ,CAAEX,MAFZ,CADJ,CAKIA,MANN,CAOA,GAAIR,KAAK,CAACC,SAAN,CAAgBO,MAAM,CAACW,QAAvB,CAAJ,CAAsC,CACpCC,WAAW,CAAC,UAAYZ,MAAM,CAACA,MAApB,CAAX,CAAyC,CACvCN,OAAO,CAAEsB,MAAM,CACbP,cAAc,CAACQ,OAAf,CAAuB,iBAAvB,CAA0CjB,MAAM,CAACA,MAAjD,CADa,CADwB,CAIvCL,UAAU,CAAE,IAJ2B,CAKvCE,MAAM,CAAE,CACN,cAAe,CACbH,OAAO,CAAE,UADI,CAEbE,KAAK,CAAE,UAFM,CADT,CAKNE,IAAI,CAAEN,KAAK,CAACC,SAAN,CAAgBO,MAAM,CAACW,QAAvB,CALA,CAL+B,CAAzC,CAaD,CACF,CACDnB,KAAK,CAACC,SAAN,CAAgByB,YAAhB,CAA6B,MAA7B,CAAqC,QAArC,CAA+CN,WAA/C,EACD,CApJA,EAoJEpB,KApJF,EAqJF"},"metadata":{},"sourceType":"module"}