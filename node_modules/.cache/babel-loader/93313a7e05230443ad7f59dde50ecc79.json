{"ast":null,"code":"'use strict';module.exports=pug;pug.displayName='pug';pug.aliases=[];function pug(Prism){;(function(Prism){// TODO:\n// - Add CSS highlighting inside <style> tags\n// - Add support for multi-line code blocks\n// - Add support for interpolation #{} and !{}\n// - Add support for tag interpolation #[]\n// - Add explicit support for plain text using |\n// - Add support for markup embedded in plain text\nPrism.languages.pug={// Multiline stuff should appear before the rest\n// This handles both single-line and multi-line comments\ncomment:{pattern:/(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,lookbehind:true},// All the tag-related part is in lookbehind\n// so that it can be highlighted by the \"tag\" pattern\n'multiline-script':{pattern:/(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:true,inside:{rest:Prism.languages.javascript}},// See at the end of the file for known filters\nfilter:{pattern:/(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:true,inside:{'filter-name':{pattern:/^:[\\w-]+/,alias:'variable'}}},'multiline-plain-text':{pattern:/(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:true},markup:{pattern:/(^[\\t ]*)<.+/m,lookbehind:true,inside:{rest:Prism.languages.markup}},doctype:{pattern:/((?:^|\\n)[\\t ]*)doctype(?: .+)?/,lookbehind:true},// This handle all conditional and loop keywords\n'flow-control':{pattern:/(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,lookbehind:true,inside:{each:{pattern:/^each .+? in\\b/,inside:{keyword:/\\b(?:each|in)\\b/,punctuation:/,/}},branch:{pattern:/^(?:if|unless|else|case|when|default|while)\\b/,alias:'keyword'},rest:Prism.languages.javascript}},keyword:{pattern:/(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,lookbehind:true},mixin:[// Declaration\n{pattern:/(^[\\t ]*)mixin .+/m,lookbehind:true,inside:{keyword:/^mixin/,function:/\\w+(?=\\s*\\(|\\s*$)/,punctuation:/[(),.]/}},// Usage\n{pattern:/(^[\\t ]*)\\+.+/m,lookbehind:true,inside:{name:{pattern:/^\\+\\w+/,alias:'function'},rest:Prism.languages.javascript}}],script:{pattern:/(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,lookbehind:true,inside:{rest:Prism.languages.javascript}},'plain-text':{pattern:/(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,lookbehind:true},tag:{pattern:/(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,lookbehind:true,inside:{attributes:[{pattern:/&[^(]+\\([^)]+\\)/,inside:{rest:Prism.languages.javascript}},{pattern:/\\([^)]+\\)/,inside:{'attr-value':{pattern:/(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,lookbehind:true,inside:{rest:Prism.languages.javascript}},'attr-name':/[\\w-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[!=(),]+/}}],punctuation:/:/}},code:[{pattern:/(^[\\t ]*(?:-|!?=)).+/m,lookbehind:true,inside:{rest:Prism.languages.javascript}}],punctuation:/[.\\-!=|]+/};var filter_pattern=/(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/.source;// Non exhaustive list of available filters and associated languages\nvar filters=[{filter:'atpl',language:'twig'},{filter:'coffee',language:'coffeescript'},'ejs','handlebars','less','livescript','markdown',{filter:'sass',language:'scss'},'stylus'];var all_filters={};for(var i=0,l=filters.length;i<l;i++){var filter=filters[i];filter=typeof filter==='string'?{filter:filter,language:filter}:filter;if(Prism.languages[filter.language]){all_filters['filter-'+filter.filter]={pattern:RegExp(filter_pattern.replace('{{filter_name}}',filter.filter),'m'),lookbehind:true,inside:{'filter-name':{pattern:/^:[\\w-]+/,alias:'variable'},rest:Prism.languages[filter.language]}};}}Prism.languages.insertBefore('pug','filter',all_filters);})(Prism);}","map":{"version":3,"names":["module","exports","pug","displayName","aliases","Prism","languages","comment","pattern","lookbehind","inside","rest","javascript","filter","alias","markup","doctype","each","keyword","punctuation","branch","mixin","function","name","script","tag","attributes","code","filter_pattern","source","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/pug.js"],"sourcesContent":["'use strict'\n\nmodule.exports = pug\npug.displayName = 'pug'\npug.aliases = []\nfunction pug(Prism) {\n  ;(function(Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [\n        // Declaration\n        {\n          pattern: /(^[\\t ]*)mixin .+/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^mixin/,\n            function: /\\w+(?=\\s*\\(|\\s*$)/,\n            punctuation: /[(),.]/\n          }\n        }, // Usage\n        {\n          pattern: /(^[\\t ]*)\\+.+/m,\n          lookbehind: true,\n          inside: {\n            name: {\n              pattern: /^\\+\\w+/,\n              alias: 'function'\n            },\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              pattern: /&[^(]+\\([^)]+\\)/,\n              inside: {\n                rest: Prism.languages.javascript\n              }\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                  lookbehind: true,\n                  inside: {\n                    rest: Prism.languages.javascript\n                  }\n                },\n                'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[!=(),]+/\n              }\n            }\n          ],\n          punctuation: /:/\n        }\n      },\n      code: [\n        {\n          pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      punctuation: /[.\\-!=|]+/\n    }\n    var filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/\n      .source // Non exhaustive list of available filters and associated languages\n    var filters = [\n      {\n        filter: 'atpl',\n        language: 'twig'\n      },\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'ejs',\n      'handlebars',\n      'less',\n      'livescript',\n      'markdown',\n      {\n        filter: 'sass',\n        language: 'scss'\n      },\n      'stylus'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', filter.filter),\n            'm'\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('pug', 'filter', all_filters)\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}