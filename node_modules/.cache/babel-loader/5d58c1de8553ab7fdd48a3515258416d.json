{"ast":null,"code":"'use strict';module.exports=erlang;erlang.displayName='erlang';erlang.aliases=[];function erlang(Prism){Prism.languages.erlang={comment:/%.+/,string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:true},'quoted-function':{pattern:/'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,alias:'function'},'quoted-atom':{pattern:/'(?:\\\\.|[^\\\\'\\r\\n])+'/,alias:'atom'},boolean:/\\b(?:true|false)\\b/,keyword:/\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,number:[/\\$\\\\?./,/\\d+#[a-z0-9]+/i,/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],function:/\\b[a-z][\\w@]*(?=\\()/,variable:{// Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\npattern:/(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,lookbehind:true},operator:[/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,{// We don't want to match <<\npattern:/(^|[^<])<(?!<)/,lookbehind:true},{// We don't want to match >>\npattern:/(^|[^>])>(?!>)/,lookbehind:true}],atom:/\\b[a-z][\\w@]*/,punctuation:/[()[\\]{}:;,.#|]|<<|>>/};}","map":{"version":3,"names":["module","exports","erlang","displayName","aliases","Prism","languages","comment","string","pattern","greedy","alias","boolean","keyword","number","function","variable","lookbehind","operator","atom","punctuation"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/erlang.js"],"sourcesContent":["'use strict'\n\nmodule.exports = erlang\nerlang.displayName = 'erlang'\nerlang.aliases = []\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    boolean: /\\b(?:true|false)\\b/,\n    keyword: /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n    number: [\n      /\\$\\\\?./,\n      /\\d+#[a-z0-9]+/i,\n      /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [\n      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  }\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,MAAjB,CACAA,MAAM,CAACC,WAAP,CAAqB,QAArB,CACAD,MAAM,CAACE,OAAP,CAAiB,EAAjB,CACA,QAASF,OAAT,CAAgBG,KAAhB,CAAuB,CACrBA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAyB,CACvBK,OAAO,CAAE,KADc,CAEvBC,MAAM,CAAE,CACNC,OAAO,CAAE,uBADH,CAENC,MAAM,CAAE,IAFF,CAFe,CAMvB,kBAAmB,CACjBD,OAAO,CAAE,6BADQ,CAEjBE,KAAK,CAAE,UAFU,CANI,CAUvB,cAAe,CACbF,OAAO,CAAE,uBADI,CAEbE,KAAK,CAAE,MAFM,CAVQ,CAcvBC,OAAO,CAAE,oBAdc,CAevBC,OAAO,CAAE,yDAfc,CAgBvBC,MAAM,CAAE,CACN,QADM,CAEN,gBAFM,CAGN,wCAHM,CAhBe,CAqBvBC,QAAQ,CAAE,qBArBa,CAsBvBC,QAAQ,CAAE,CACR;AACAP,OAAO,CAAE,+BAFD,CAGRQ,UAAU,CAAE,IAHJ,CAtBa,CA2BvBC,QAAQ,CAAE,CACR,8GADQ,CAER,CACE;AACAT,OAAO,CAAE,gBAFX,CAGEQ,UAAU,CAAE,IAHd,CAFQ,CAOR,CACE;AACAR,OAAO,CAAE,gBAFX,CAGEQ,UAAU,CAAE,IAHd,CAPQ,CA3Ba,CAwCvBE,IAAI,CAAE,eAxCiB,CAyCvBC,WAAW,CAAE,uBAzCU,CAAzB,CA2CD"},"metadata":{},"sourceType":"module"}