{"ast":null,"code":"'use strict';module.exports=sass;sass.displayName='sass';sass.aliases=[];function sass(Prism){;(function(Prism){Prism.languages.sass=Prism.languages.extend('css',{// Sass comments don't need to be closed, only indented\ncomment:{pattern:/^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,lookbehind:true}});Prism.languages.insertBefore('sass','atrule',{// We want to consume the whole line\n'atrule-line':{// Includes support for = and + shortcuts\npattern:/^(?:[ \\t]*)[@+=].+/m,inside:{atrule:/(?:@[\\w-]+|[+=])/m}}});delete Prism.languages.sass.atrule;var variable=/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;var operator=[/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,{pattern:/(\\s+)-(?=\\s)/,lookbehind:true}];Prism.languages.insertBefore('sass','property',{// We want to consume the whole line\n'variable-line':{pattern:/^[ \\t]*\\$.+/m,inside:{punctuation:/:/,variable:variable,operator:operator}},// We want to consume the whole line\n'property-line':{pattern:/^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,inside:{property:[/[^:\\s]+(?=\\s*:)/,{pattern:/(:)[^:\\s]+/,lookbehind:true}],punctuation:/:/,variable:variable,operator:operator,important:Prism.languages.sass.important}}});delete Prism.languages.sass.property;delete Prism.languages.sass.important;// Now that whole lines for other patterns are consumed,\n// what's left should be selectors\nPrism.languages.insertBefore('sass','punctuation',{selector:{pattern:/([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,lookbehind:true}});})(Prism);}","map":{"version":3,"names":["module","exports","sass","displayName","aliases","Prism","languages","extend","comment","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/sass.js"],"sourcesContent":["'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function(Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n      {\n        pattern: /(\\s+)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,IAAjB,CACAA,IAAI,CAACC,WAAL,CAAmB,MAAnB,CACAD,IAAI,CAACE,OAAL,CAAe,EAAf,CACA,QAASF,KAAT,CAAcG,KAAd,CAAqB,CACnB,CAAC,CAAC,SAASA,KAAT,CAAgB,CAChBA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,KAAvB,CAA8B,CACnD;AACAC,OAAO,CAAE,CACPC,OAAO,CAAE,gDADF,CAEPC,UAAU,CAAE,IAFL,CAF0C,CAA9B,CAAvB,CAOAL,KAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,CAAqC,QAArC,CAA+C,CAC7C;AACA,cAAe,CACb;AACAF,OAAO,CAAE,qBAFI,CAGbG,MAAM,CAAE,CACNC,MAAM,CAAE,mBADF,CAHK,CAF8B,CAA/C,EAUA,MAAOR,MAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBW,MAA5B,CACA,GAAIC,SAAQ,CAAG,wBAAf,CACA,GAAIC,SAAQ,CAAG,CACb,0CADa,CAEb,CACEN,OAAO,CAAE,cADX,CAEEC,UAAU,CAAE,IAFd,CAFa,CAAf,CAOAL,KAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,CAAqC,UAArC,CAAiD,CAC/C;AACA,gBAAiB,CACfF,OAAO,CAAE,cADM,CAEfG,MAAM,CAAE,CACNI,WAAW,CAAE,GADP,CAENF,QAAQ,CAAEA,QAFJ,CAGNC,QAAQ,CAAEA,QAHJ,CAFO,CAF8B,CAU/C;AACA,gBAAiB,CACfN,OAAO,CAAE,qCADM,CAEfG,MAAM,CAAE,CACNK,QAAQ,CAAE,CACR,iBADQ,CAER,CACER,OAAO,CAAE,YADX,CAEEC,UAAU,CAAE,IAFd,CAFQ,CADJ,CAQNM,WAAW,CAAE,GARP,CASNF,QAAQ,CAAEA,QATJ,CAUNC,QAAQ,CAAEA,QAVJ,CAWNG,SAAS,CAAEb,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBgB,SAX1B,CAFO,CAX8B,CAAjD,EA4BA,MAAOb,MAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBe,QAA5B,CACA,MAAOZ,MAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBgB,SAA5B,CAAsC;AACtC;AACAb,KAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,CAAqC,aAArC,CAAoD,CAClDQ,QAAQ,CAAE,CACRV,OAAO,CAAE,wEADD,CAERC,UAAU,CAAE,IAFJ,CADwC,CAApD,EAMD,CAhEA,EAgEEL,KAhEF,EAiEF"},"metadata":{},"sourceType":"module"}