{"ast":null,"code":"'use strict';module.exports=elm;elm.displayName='elm';elm.aliases=[];function elm(Prism){Prism.languages.elm={comment:/--.*|{-[\\s\\S]*?-}/,char:{pattern:/'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,greedy:true},string:[{// Multiline strings are wrapped in triple \". Quotes may appear unescaped.\npattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:true},{pattern:/\"(?:[^\\\\\"\\r\\n]|\\\\(?:[abfnrtv\\\\\"]|\\d+|x[0-9a-fA-F]+))*\"/,greedy:true}],import_statement:{// The imported or hidden names are not included in this import\n// statement. This is because we want to highlight those exactly like\n// we do for the names in the program.\npattern:/^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+([A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,inside:{keyword:/\\b(?:import|as|exposing)\\b/}},keyword:/\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,// These are builtin variables only. Constructors are highlighted later as a constant.\nbuiltin:/\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,// decimal integers and floating point numbers | hexadecimal integers\nnumber:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,// Most of this is needed because of the meaning of a single '.'.\n// If it stands alone freely, it is the function composition.\n// It may also be a separator between a module name and an identifier => no\n// operator. If it comes together with other special characters it is an\n// operator too.\n// Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n// Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\noperator:/\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,// In Elm, nearly everything is a variable, do not highlight these.\nhvariable:/\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,constant:/\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,punctuation:/[{}[\\]|(),.:]/};}","map":{"version":3,"names":["module","exports","elm","displayName","aliases","Prism","languages","comment","char","pattern","greedy","string","import_statement","inside","keyword","builtin","number","operator","hvariable","constant","punctuation"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/elm.js"],"sourcesContent":["'use strict'\n\nmodule.exports = elm\nelm.displayName = 'elm'\nelm.aliases = []\nfunction elm(Prism) {\n  Prism.languages.elm = {\n    comment: /--.*|{-[\\s\\S]*?-}/,\n    char: {\n      pattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,\n      greedy: true\n    },\n    string: [\n      {\n        // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true\n      },\n      {\n        pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:[abfnrtv\\\\\"]|\\d+|x[0-9a-fA-F]+))*\"/,\n        greedy: true\n      }\n    ],\n    import_statement: {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern: /^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+([A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n      inside: {\n        keyword: /\\b(?:import|as|exposing)\\b/\n      }\n    },\n    keyword: /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin: /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n    // decimal integers and floating point numbers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n    // In Elm, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n    punctuation: /[{}[\\]|(),.:]/\n  }\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,GAAjB,CACAA,GAAG,CAACC,WAAJ,CAAkB,KAAlB,CACAD,GAAG,CAACE,OAAJ,CAAc,EAAd,CACA,QAASF,IAAT,CAAaG,KAAb,CAAoB,CAClBA,KAAK,CAACC,SAAN,CAAgBJ,GAAhB,CAAsB,CACpBK,OAAO,CAAE,mBADW,CAEpBC,IAAI,CAAE,CACJC,OAAO,CAAE,uDADL,CAEJC,MAAM,CAAE,IAFJ,CAFc,CAMpBC,MAAM,CAAE,CACN,CACE;AACAF,OAAO,CAAE,gBAFX,CAGEC,MAAM,CAAE,IAHV,CADM,CAMN,CACED,OAAO,CAAE,wDADX,CAEEC,MAAM,CAAE,IAFV,CANM,CANY,CAiBpBE,gBAAgB,CAAE,CAChB;AACA;AACA;AACAH,OAAO,CAAE,gGAJO,CAKhBI,MAAM,CAAE,CACNC,OAAO,CAAE,4BADH,CALQ,CAjBE,CA0BpBA,OAAO,CAAE,iFA1BW,CA2BpB;AACAC,OAAO,CAAE,yPA5BW,CA6BpB;AACAC,MAAM,CAAE,kDA9BY,CA+BpB;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,QAAQ,CAAE,yDAtCU,CAuCpB;AACAC,SAAS,CAAE,6BAxCS,CAyCpBC,QAAQ,CAAE,6BAzCU,CA0CpBC,WAAW,CAAE,eA1CO,CAAtB,CA4CD"},"metadata":{},"sourceType":"module"}