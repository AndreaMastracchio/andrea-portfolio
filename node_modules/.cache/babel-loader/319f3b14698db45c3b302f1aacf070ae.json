{"ast":null,"code":"'use strict';var refractorC=require('./c.js');module.exports=pure;pure.displayName='pure';pure.aliases=[];function pure(Prism){Prism.register(refractorC);(function(Prism){Prism.languages.pure={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:true},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:true},/#!.+/],'inline-lang':{pattern:/%<[\\s\\S]+?%>/,greedy:true,inside:{lang:{pattern:/(^%< *)-\\*-.+?-\\*-/,lookbehind:true,alias:'comment'},delimiter:{pattern:/^%<.*|%>$/,alias:'punctuation'}}},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,greedy:true},number:{// The look-behind prevents wrong highlighting of the .. operator\npattern:/((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,lookbehind:true},keyword:/\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,function:/\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,special:{pattern:/\\b__[a-z]+__\\b/i,alias:'builtin'},// Any combination of operator chars can be an operator\noperator:/(?=\\b_|[^_])[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^_`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]+|\\b(?:and|div|mod|not|or)\\b/,// FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\npunctuation:/[(){}\\[\\];,|]/};var inlineLanguages=['c',{lang:'c++',alias:'cpp'},'fortran'];var inlineLanguageRe=/%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source;inlineLanguages.forEach(function(lang){var alias=lang;if(typeof lang!=='string'){alias=lang.alias;lang=lang.lang;}if(Prism.languages[alias]){var o={};o['inline-lang-'+alias]={pattern:RegExp(inlineLanguageRe.replace('{lang}',lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,'\\\\$1')),'i'),inside:Prism.util.clone(Prism.languages.pure['inline-lang'].inside)};o['inline-lang-'+alias].inside.rest=Prism.util.clone(Prism.languages[alias]);Prism.languages.insertBefore('pure','inline-lang',o);}});// C is the default inline language\nif(Prism.languages.c){Prism.languages.pure['inline-lang'].inside.rest=Prism.util.clone(Prism.languages.c);}})(Prism);}","map":{"version":3,"names":["refractorC","require","module","exports","pure","displayName","aliases","Prism","register","languages","comment","pattern","lookbehind","greedy","inside","lang","alias","delimiter","string","number","keyword","function","special","operator","punctuation","inlineLanguages","inlineLanguageRe","source","forEach","o","RegExp","replace","util","clone","rest","insertBefore","c"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/pure.js"],"sourcesContent":["'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = pure\npure.displayName = 'pure'\npure.aliases = []\nfunction pure(Prism) {\n  Prism.register(refractorC)\n  ;(function(Prism) {\n    Prism.languages.pure = {\n      comment: [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n          lookbehind: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true\n        },\n        /#!.+/\n      ],\n      'inline-lang': {\n        pattern: /%<[\\s\\S]+?%>/,\n        greedy: true,\n        inside: {\n          lang: {\n            pattern: /(^%< *)-\\*-.+?-\\*-/,\n            lookbehind: true,\n            alias: 'comment'\n          },\n          delimiter: {\n            pattern: /^%<.*|%>$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n      },\n      number: {\n        // The look-behind prevents wrong highlighting of the .. operator\n        pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,\n        lookbehind: true\n      },\n      keyword: /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n      function: /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n      special: {\n        pattern: /\\b__[a-z]+__\\b/i,\n        alias: 'builtin'\n      },\n      // Any combination of operator chars can be an operator\n      operator: /(?=\\b_|[^_])[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^_`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]+|\\b(?:and|div|mod|not|or)\\b/,\n      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n      punctuation: /[(){}\\[\\];,|]/\n    }\n    var inlineLanguages = [\n      'c',\n      {\n        lang: 'c++',\n        alias: 'cpp'\n      },\n      'fortran'\n    ]\n    var inlineLanguageRe = /%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source\n    inlineLanguages.forEach(function(lang) {\n      var alias = lang\n      if (typeof lang !== 'string') {\n        alias = lang.alias\n        lang = lang.lang\n      }\n      if (Prism.languages[alias]) {\n        var o = {}\n        o['inline-lang-' + alias] = {\n          pattern: RegExp(\n            inlineLanguageRe.replace(\n              '{lang}',\n              lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')\n            ),\n            'i'\n          ),\n          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n        }\n        o['inline-lang-' + alias].inside.rest = Prism.util.clone(\n          Prism.languages[alias]\n        )\n        Prism.languages.insertBefore('pure', 'inline-lang', o)\n      }\n    }) // C is the default inline language\n    if (Prism.languages.c) {\n      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(\n        Prism.languages.c\n      )\n    }\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}