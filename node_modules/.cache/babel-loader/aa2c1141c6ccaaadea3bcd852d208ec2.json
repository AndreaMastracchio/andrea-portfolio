{"ast":null,"code":"'use strict';module.exports=elixir;elixir.displayName='elixir';elixir.aliases=[];function elixir(Prism){Prism.languages.elixir={comment:/#.*/m,// ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\nregex:{pattern:/~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,greedy:true},string:[{// ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\npattern:/~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,greedy:true,inside:{// See interpolation below\n}},{pattern:/(\"\"\"|''')[\\s\\S]*?\\1/,greedy:true,inside:{// See interpolation below\n}},{// Multi-line strings are allowed\npattern:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:true,inside:{// See interpolation below\n}}],atom:{// Look-behind prevents bad highlighting of the :: operator\npattern:/(^|[^:]):\\w+/,lookbehind:true,alias:'symbol'},// Look-ahead prevents bad highlighting of the :: operator\n'attr-name':/\\w+:(?!:)/,capture:{// Look-behind prevents bad highlighting of the && operator\npattern:/(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,lookbehind:true,alias:'function'},argument:{// Look-behind prevents bad highlighting of the && operator\npattern:/(^|[^&])&\\d+/,lookbehind:true,alias:'variable'},attribute:{pattern:/@\\w+/,alias:'variable'},number:/\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,keyword:/\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,boolean:/\\b(?:true|false|nil)\\b/,operator:[/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,{// We don't want to match <<\npattern:/([^<])<(?!<)/,lookbehind:true},{// We don't want to match >>\npattern:/([^>])>(?!>)/,lookbehind:true}],punctuation:/<<|>>|[.,%\\[\\]{}()]/};Prism.languages.elixir.string.forEach(function(o){o.inside={interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:'punctuation'},rest:Prism.languages.elixir}}};});}","map":{"version":3,"names":["module","exports","elixir","displayName","aliases","Prism","languages","comment","regex","pattern","greedy","string","inside","atom","lookbehind","alias","capture","argument","attribute","number","keyword","boolean","operator","punctuation","forEach","o","interpolation","delimiter","rest"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/elixir.js"],"sourcesContent":["'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    comment: /#.*/m,\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\w+:(?!:)/,\n    capture: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n    boolean: /\\b(?:true|false|nil)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function(o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,MAAjB,CACAA,MAAM,CAACC,WAAP,CAAqB,QAArB,CACAD,MAAM,CAACE,OAAP,CAAiB,EAAjB,CACA,QAASF,OAAT,CAAgBG,KAAhB,CAAuB,CACrBA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAyB,CACvBK,OAAO,CAAE,MADc,CAEvB;AACAC,KAAK,CAAE,CACLC,OAAO,CAAE,4LADJ,CAELC,MAAM,CAAE,IAFH,CAHgB,CAOvBC,MAAM,CAAE,CACN,CACE;AACAF,OAAO,CAAE,uMAFX,CAGEC,MAAM,CAAE,IAHV,CAIEE,MAAM,CAAE,CACN;AADM,CAJV,CADM,CASN,CACEH,OAAO,CAAE,qBADX,CAEEC,MAAM,CAAE,IAFV,CAGEE,MAAM,CAAE,CACN;AADM,CAHV,CATM,CAgBN,CACE;AACAH,OAAO,CAAE,+CAFX,CAGEC,MAAM,CAAE,IAHV,CAIEE,MAAM,CAAE,CACN;AADM,CAJV,CAhBM,CAPe,CAgCvBC,IAAI,CAAE,CACJ;AACAJ,OAAO,CAAE,cAFL,CAGJK,UAAU,CAAE,IAHR,CAIJC,KAAK,CAAE,QAJH,CAhCiB,CAsCvB;AACA,YAAa,WAvCU,CAwCvBC,OAAO,CAAE,CACP;AACAP,OAAO,CAAE,wCAFF,CAGPK,UAAU,CAAE,IAHL,CAIPC,KAAK,CAAE,UAJA,CAxCc,CA8CvBE,QAAQ,CAAE,CACR;AACAR,OAAO,CAAE,cAFD,CAGRK,UAAU,CAAE,IAHJ,CAIRC,KAAK,CAAE,UAJC,CA9Ca,CAoDvBG,SAAS,CAAE,CACTT,OAAO,CAAE,MADA,CAETM,KAAK,CAAE,UAFE,CApDY,CAwDvBI,MAAM,CAAE,iEAxDe,CAyDvBC,OAAO,CAAE,yKAzDc,CA0DvBC,OAAO,CAAE,wBA1Dc,CA2DvBC,QAAQ,CAAE,CACR,0FADQ,CAER,CACE;AACAb,OAAO,CAAE,cAFX,CAGEK,UAAU,CAAE,IAHd,CAFQ,CAOR,CACE;AACAL,OAAO,CAAE,cAFX,CAGEK,UAAU,CAAE,IAHd,CAPQ,CA3Da,CAwEvBS,WAAW,CAAE,qBAxEU,CAAzB,CA0EAlB,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuBS,MAAvB,CAA8Ba,OAA9B,CAAsC,SAASC,CAAT,CAAY,CAChDA,CAAC,CAACb,MAAF,CAAW,CACTc,aAAa,CAAE,CACbjB,OAAO,CAAE,YADI,CAEbG,MAAM,CAAE,CACNe,SAAS,CAAE,CACTlB,OAAO,CAAE,UADA,CAETM,KAAK,CAAE,aAFE,CADL,CAKNa,IAAI,CAAEvB,KAAK,CAACC,SAAN,CAAgBJ,MALhB,CAFK,CADN,CAAX,CAYD,CAbD,EAcD"},"metadata":{},"sourceType":"module"}