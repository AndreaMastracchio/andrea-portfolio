{"ast":null,"code":"'use strict';module.exports=javadoclike;javadoclike.displayName='javadoclike';javadoclike.aliases=[];function javadoclike(Prism){;(function(Prism){var javaDocLike=Prism.languages.javadoclike={parameter:{pattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,lookbehind:true},keyword:{// keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n// @word, {@word}\npattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,lookbehind:true},punctuation:/[{}]/};/**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */function docCommentSupport(lang,callback){var tokenName='doc-comment';var grammar=Prism.languages[lang];if(!grammar){return;}var token=grammar[tokenName];if(!token){// add doc comment: /** */\nvar definition={};definition[tokenName]={pattern:/(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,alias:'comment'};grammar=Prism.languages.insertBefore(lang,'comment',definition);token=grammar[tokenName];}if(token instanceof RegExp){// convert regex to object\ntoken=grammar[tokenName]={pattern:token};}if(Array.isArray(token)){for(var i=0,l=token.length;i<l;i++){if(token[i]instanceof RegExp){token[i]={pattern:token[i]};}callback(token[i]);}}else{callback(token);}}/**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */function addSupport(languages,docLanguage){if(typeof languages==='string'){languages=[languages];}languages.forEach(function(lang){docCommentSupport(lang,function(pattern){if(!pattern.inside){pattern.inside={};}pattern.inside.rest=docLanguage;});});}Object.defineProperty(javaDocLike,'addSupport',{value:addSupport});javaDocLike.addSupport(['java','javascript','php'],javaDocLike);})(Prism);}","map":{"version":3,"names":["module","exports","javadoclike","displayName","aliases","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","docCommentSupport","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","addSupport","docLanguage","forEach","inside","rest","Object","defineProperty","value"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/javadoclike.js"],"sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function(Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function(lang) {\n        docCommentSupport(lang, function(pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,WAAjB,CACAA,WAAW,CAACC,WAAZ,CAA0B,aAA1B,CACAD,WAAW,CAACE,OAAZ,CAAsB,EAAtB,CACA,QAASF,YAAT,CAAqBG,KAArB,CAA4B,CAC1B,CAAC,CAAC,SAASA,KAAT,CAAgB,CAChB,GAAIC,YAAW,CAAID,KAAK,CAACE,SAAN,CAAgBL,WAAhB,CAA8B,CAC/CM,SAAS,CAAE,CACTC,OAAO,CAAE,6DADA,CAETC,UAAU,CAAE,IAFH,CADoC,CAK/CC,OAAO,CAAE,CACP;AACA;AACAF,OAAO,CAAE,oDAHF,CAIPC,UAAU,CAAE,IAJL,CALsC,CAW/CE,WAAW,CAAE,MAXkC,CAAjD,CAaA;AACJ;AACA;AACA;AACA;AACA,OACI,QAASC,kBAAT,CAA2BC,IAA3B,CAAiCC,QAAjC,CAA2C,CACzC,GAAIC,UAAS,CAAG,aAAhB,CACA,GAAIC,QAAO,CAAGZ,KAAK,CAACE,SAAN,CAAgBO,IAAhB,CAAd,CACA,GAAI,CAACG,OAAL,CAAc,CACZ,OACD,CACD,GAAIC,MAAK,CAAGD,OAAO,CAACD,SAAD,CAAnB,CACA,GAAI,CAACE,KAAL,CAAY,CACV;AACA,GAAIC,WAAU,CAAG,EAAjB,CACAA,UAAU,CAACH,SAAD,CAAV,CAAwB,CACtBP,OAAO,CAAE,uCADa,CAEtBW,KAAK,CAAE,SAFe,CAAxB,CAIAH,OAAO,CAAGZ,KAAK,CAACE,SAAN,CAAgBc,YAAhB,CAA6BP,IAA7B,CAAmC,SAAnC,CAA8CK,UAA9C,CAAV,CACAD,KAAK,CAAGD,OAAO,CAACD,SAAD,CAAf,CACD,CACD,GAAIE,KAAK,WAAYI,OAArB,CAA6B,CAC3B;AACAJ,KAAK,CAAGD,OAAO,CAACD,SAAD,CAAP,CAAqB,CAC3BP,OAAO,CAAES,KADkB,CAA7B,CAGD,CACD,GAAIK,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAJ,CAA0B,CACxB,IAAK,GAAIO,EAAC,CAAG,CAAR,CAAWC,CAAC,CAAGR,KAAK,CAACS,MAA1B,CAAkCF,CAAC,CAAGC,CAAtC,CAAyCD,CAAC,EAA1C,CAA8C,CAC5C,GAAIP,KAAK,CAACO,CAAD,CAAL,UAAoBH,OAAxB,CAAgC,CAC9BJ,KAAK,CAACO,CAAD,CAAL,CAAW,CACThB,OAAO,CAAES,KAAK,CAACO,CAAD,CADL,CAAX,CAGD,CACDV,QAAQ,CAACG,KAAK,CAACO,CAAD,CAAN,CAAR,CACD,CACF,CATD,IASO,CACLV,QAAQ,CAACG,KAAD,CAAR,CACD,CACF,CACD;AACJ;AACA;AACA;AACA;AACA,OACI,QAASU,WAAT,CAAoBrB,SAApB,CAA+BsB,WAA/B,CAA4C,CAC1C,GAAI,MAAOtB,UAAP,GAAqB,QAAzB,CAAmC,CACjCA,SAAS,CAAG,CAACA,SAAD,CAAZ,CACD,CACDA,SAAS,CAACuB,OAAV,CAAkB,SAAShB,IAAT,CAAe,CAC/BD,iBAAiB,CAACC,IAAD,CAAO,SAASL,OAAT,CAAkB,CACxC,GAAI,CAACA,OAAO,CAACsB,MAAb,CAAqB,CACnBtB,OAAO,CAACsB,MAAR,CAAiB,EAAjB,CACD,CACDtB,OAAO,CAACsB,MAAR,CAAeC,IAAf,CAAsBH,WAAtB,CACD,CALgB,CAAjB,CAMD,CAPD,EAQD,CACDI,MAAM,CAACC,cAAP,CAAsB5B,WAAtB,CAAmC,YAAnC,CAAiD,CAC/C6B,KAAK,CAAEP,UADwC,CAAjD,EAGAtB,WAAW,CAACsB,UAAZ,CAAuB,CAAC,MAAD,CAAS,YAAT,CAAuB,KAAvB,CAAvB,CAAsDtB,WAAtD,EACD,CA/EA,EA+EED,KA/EF,EAgFF"},"metadata":{},"sourceType":"module"}