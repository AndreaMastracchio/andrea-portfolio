{"ast":null,"code":"'use strict';module.exports=nim;nim.displayName='nim';nim.aliases=[];function nim(Prism){Prism.languages.nim={comment:/#.*/,// Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n// Character literals are handled specifically to prevent issues with numeric type suffixes\nstring:{pattern:/(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,greedy:true},// The negative look ahead prevents wrong highlighting of the .. operator\nnumber:/\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,keyword:/\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,function:{pattern:/(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,inside:{operator:/\\*$/}},// We don't want to highlight operators inside backticks\nignore:{pattern:/`[^`\\r\\n]+`/,inside:{punctuation:/`/}},operator:{// Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n// but allow the slice operator .. to take precedence over them\n// One can define his own operators in Nim so all combination of operators might be an operator.\npattern:/(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,lookbehind:true},punctuation:/[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/};}","map":{"version":3,"names":["module","exports","nim","displayName","aliases","Prism","languages","comment","string","pattern","greedy","number","keyword","function","inside","operator","ignore","punctuation","lookbehind"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/nim.js"],"sourcesContent":["'use strict'\n\nmodule.exports = nim\nnim.displayName = 'nim'\nnim.aliases = []\nfunction nim(Prism) {\n  Prism.languages.nim = {\n    comment: /#.*/,\n    // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n    // Character literals are handled specifically to prevent issues with numeric type suffixes\n    string: {\n      pattern: /(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,\n      greedy: true\n    },\n    // The negative look ahead prevents wrong highlighting of the .. operator\n    number: /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n    keyword: /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n    function: {\n      pattern: /(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n      inside: {\n        operator: /\\*$/\n      }\n    },\n    // We don't want to highlight operators inside backticks\n    ignore: {\n      pattern: /`[^`\\r\\n]+`/,\n      inside: {\n        punctuation: /`/\n      }\n    },\n    operator: {\n      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n      // but allow the slice operator .. to take precedence over them\n      // One can define his own operators in Nim so all combination of operators might be an operator.\n      pattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,\n      lookbehind: true\n    },\n    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n  }\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,GAAjB,CACAA,GAAG,CAACC,WAAJ,CAAkB,KAAlB,CACAD,GAAG,CAACE,OAAJ,CAAc,EAAd,CACA,QAASF,IAAT,CAAaG,KAAb,CAAoB,CAClBA,KAAK,CAACC,SAAN,CAAgBJ,GAAhB,CAAsB,CACpBK,OAAO,CAAE,KADW,CAEpB;AACA;AACAC,MAAM,CAAE,CACNC,OAAO,CAAE,2IADH,CAENC,MAAM,CAAE,IAFF,CAJY,CAQpB;AACAC,MAAM,CAAE,gGATY,CAUpBC,OAAO,CAAE,6VAVW,CAWpBC,QAAQ,CAAE,CACRJ,OAAO,CAAE,oFADD,CAERK,MAAM,CAAE,CACNC,QAAQ,CAAE,KADJ,CAFA,CAXU,CAiBpB;AACAC,MAAM,CAAE,CACNP,OAAO,CAAE,aADH,CAENK,MAAM,CAAE,CACNG,WAAW,CAAE,GADP,CAFF,CAlBY,CAwBpBF,QAAQ,CAAE,CACR;AACA;AACA;AACAN,OAAO,CAAE,iJAJD,CAKRS,UAAU,CAAE,IALJ,CAxBU,CA+BpBD,WAAW,CAAE,iCA/BO,CAAtB,CAiCD"},"metadata":{},"sourceType":"module"}