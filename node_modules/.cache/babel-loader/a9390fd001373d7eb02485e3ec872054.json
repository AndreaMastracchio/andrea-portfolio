{"ast":null,"code":"'use strict';module.exports=xquery;xquery.displayName='xquery';xquery.aliases=[];function xquery(Prism){;(function(Prism){Prism.languages.xquery=Prism.languages.extend('markup',{'xquery-comment':{pattern:/\\(:[\\s\\S]*?:\\)/,greedy:true,alias:'comment'},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,greedy:true},extension:{pattern:/\\(#.+?#\\)/,alias:'symbol'},variable:/\\$[\\w-:]+/,axis:{pattern:/(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,lookbehind:true,alias:'operator'},'keyword-operator':{pattern:/(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,lookbehind:true,alias:'operator'},keyword:{pattern:/(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,lookbehind:true},function:/[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,'xquery-element':{pattern:/(element\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:true,alias:'tag'},'xquery-attribute':{pattern:/(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:true,alias:'attr-name'},builtin:{pattern:/(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,lookbehind:true},number:/\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,operator:[/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,{pattern:/(\\s)-(?=\\s)/,lookbehind:true}],punctuation:/[[\\](){},;:/]/});Prism.languages.xquery.tag.pattern=/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;Prism.languages.xquery['tag'].inside['attr-value'].pattern=/=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i;Prism.languages.xquery['tag'].inside['attr-value'].inside['punctuation']=/^=\"|\"$/;Prism.languages.xquery['tag'].inside['attr-value'].inside['expression']={// Allow for two levels of nesting\npattern:/{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,inside:{rest:Prism.languages.xquery},alias:'language-xquery'};// The following will handle plain text inside tags\nvar stringifyToken=function stringifyToken(token){if(typeof token==='string'){return token;}if(typeof token.content==='string'){return token.content;}return token.content.map(stringifyToken).join('');};var walkTokens=function walkTokens(tokens){var openedTags=[];for(var i=0;i<tokens.length;i++){var token=tokens[i];var notTagNorBrace=false;if(typeof token!=='string'){if(token.type==='tag'&&token.content[0]&&token.content[0].type==='tag'){// We found a tag, now find its kind\nif(token.content[0].content[0].content==='</'){// Closing tag\nif(openedTags.length>0&&openedTags[openedTags.length-1].tagName===stringifyToken(token.content[0].content[1])){// Pop matching opening tag\nopenedTags.pop();}}else{if(token.content[token.content.length-1].content==='/>'){// Autoclosed tag, ignore\n}else{// Opening tag\nopenedTags.push({tagName:stringifyToken(token.content[0].content[1]),openedBraces:0});}}}else if(openedTags.length>0&&token.type==='punctuation'&&token.content==='{'&&(// Ignore `{{`\n!tokens[i+1]||tokens[i+1].type!=='punctuation'||tokens[i+1].content!=='{')&&(!tokens[i-1]||tokens[i-1].type!=='plain-text'||tokens[i-1].content!=='{')){// Here we might have entered an XQuery expression inside a tag\nopenedTags[openedTags.length-1].openedBraces++;}else if(openedTags.length>0&&openedTags[openedTags.length-1].openedBraces>0&&token.type==='punctuation'&&token.content==='}'){// Here we might have left an XQuery expression inside a tag\nopenedTags[openedTags.length-1].openedBraces--;}else if(token.type!=='comment'){notTagNorBrace=true;}}if(notTagNorBrace||typeof token==='string'){if(openedTags.length>0&&openedTags[openedTags.length-1].openedBraces===0){// Here we are inside a tag, and not inside an XQuery expression.\n// That's plain text: drop any tokens matched.\nvar plainText=stringifyToken(token);// And merge text with adjacent text\nif(i<tokens.length-1&&(typeof tokens[i+1]==='string'||tokens[i+1].type==='plain-text')){plainText+=stringifyToken(tokens[i+1]);tokens.splice(i+1,1);}if(i>0&&(typeof tokens[i-1]==='string'||tokens[i-1].type==='plain-text')){plainText=stringifyToken(tokens[i-1])+plainText;tokens.splice(i-1,1);i--;}if(/^\\s+$/.test(plainText)){tokens[i]=plainText;}else{tokens[i]=new Prism.Token('plain-text',plainText,null,plainText);}}}if(token.content&&typeof token.content!=='string'){walkTokens(token.content);}}};Prism.hooks.add('after-tokenize',function(env){if(env.language!=='xquery'){return;}walkTokens(env.tokens);});})(Prism);}","map":{"version":3,"names":["module","exports","xquery","displayName","aliases","Prism","languages","extend","pattern","greedy","alias","string","extension","variable","axis","lookbehind","keyword","function","builtin","number","operator","punctuation","tag","inside","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","test","Token","hooks","add","env","language"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/xquery.js"],"sourcesContent":["'use strict'\n\nmodule.exports = xquery\nxquery.displayName = 'xquery'\nxquery.aliases = []\nfunction xquery(Prism) {\n  ;(function(Prism) {\n    Prism.languages.xquery = Prism.languages.extend('markup', {\n      'xquery-comment': {\n        pattern: /\\(:[\\s\\S]*?:\\)/,\n        greedy: true,\n        alias: 'comment'\n      },\n      string: {\n        pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n        greedy: true\n      },\n      extension: {\n        pattern: /\\(#.+?#\\)/,\n        alias: 'symbol'\n      },\n      variable: /\\$[\\w-:]+/,\n      axis: {\n        pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      'keyword-operator': {\n        pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      keyword: {\n        pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n      'xquery-element': {\n        pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'tag'\n      },\n      'xquery-attribute': {\n        pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'attr-name'\n      },\n      builtin: {\n        pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n      operator: [\n        /[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,\n        {\n          pattern: /(\\s)-(?=\\s)/,\n          lookbehind: true\n        }\n      ],\n      punctuation: /[[\\](){},;:/]/\n    })\n    Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i\n    Prism.languages.xquery['tag'].inside[\n      'attr-value'\n    ].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i\n    Prism.languages.xquery['tag'].inside['attr-value'].inside[\n      'punctuation'\n    ] = /^=\"|\"$/\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n      // Allow for two levels of nesting\n      pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n      inside: {\n        rest: Prism.languages.xquery\n      },\n      alias: 'language-xquery'\n    } // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function(tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{' && // Ignore `{{`\n            (!tokens[i + 1] ||\n              tokens[i + 1].type !== 'punctuation' ||\n              tokens[i + 1].content !== '{') &&\n            (!tokens[i - 1] ||\n              tokens[i - 1].type !== 'plain-text' ||\n              tokens[i - 1].content !== '{')\n          ) {\n            // Here we might have entered an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else if (token.type !== 'comment') {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside an XQuery expression.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            if (/^\\s+$/.test(plainText)) {\n              tokens[i] = plainText\n            } else {\n              tokens[i] = new Prism.Token(\n                'plain-text',\n                plainText,\n                null,\n                plainText\n              )\n            }\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'xquery') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}