{"ast":null,"code":"'use strict';module.exports=rust;rust.displayName='rust';rust.aliases=[];function rust(Prism){/* TODO\nAdd support for Markdown notation inside doc comments\nAdd support for nested block comments...\nMatch closure params even when not followed by dash or brace\nAdd better support for macro definition\n*/Prism.languages.rust={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:true},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:true}],string:[{pattern:/b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,greedy:true},{pattern:/b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:true}],char:{pattern:/b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,alias:'string'},'lifetime-annotation':{pattern:/'[^\\s>']+/,alias:'symbol'},keyword:/\\b(?:abstract|alignof|as|async|await|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,attribute:{pattern:/#!?\\[.+?\\]/,greedy:true,alias:'attr-name'},function:[/\\w+(?=\\s*\\()/,// Macros can use parens or brackets\n/\\w+!(?=\\s*\\(|\\[)/],'macro-rules':{pattern:/\\w+!/,alias:'function'},// Hex, oct, bin, dec numbers with visual separators and type suffix\nnumber:/\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,// Closure params should not be confused with bitwise OR |\n'closure-params':{pattern:/\\|[^|]*\\|(?=\\s*[{-])/,inside:{punctuation:/[|:,]/,operator:/[&*]/}},punctuation:/->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,operator:/[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/};}","map":{"version":3,"names":["module","exports","rust","displayName","aliases","Prism","languages","comment","pattern","lookbehind","string","greedy","char","alias","keyword","attribute","function","number","inside","punctuation","operator"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/rust.js"],"sourcesContent":["'use strict'\n\nmodule.exports = rust\nrust.displayName = 'rust'\nrust.aliases = []\nfunction rust(Prism) {\n  /* TODO\nAdd support for Markdown notation inside doc comments\nAdd support for nested block comments...\nMatch closure params even when not followed by dash or brace\nAdd better support for macro definition\n*/\n  Prism.languages.rust = {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    string: [\n      {\n        pattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,\n        greedy: true\n      },\n      {\n        pattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      }\n    ],\n    char: {\n      pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n      alias: 'string'\n    },\n    'lifetime-annotation': {\n      pattern: /'[^\\s>']+/,\n      alias: 'symbol'\n    },\n    keyword: /\\b(?:abstract|alignof|as|async|await|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n    attribute: {\n      pattern: /#!?\\[.+?\\]/,\n      greedy: true,\n      alias: 'attr-name'\n    },\n    function: [\n      /\\w+(?=\\s*\\()/, // Macros can use parens or brackets\n      /\\w+!(?=\\s*\\(|\\[)/\n    ],\n    'macro-rules': {\n      pattern: /\\w+!/,\n      alias: 'function'\n    },\n    // Hex, oct, bin, dec numbers with visual separators and type suffix\n    number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\n    // Closure params should not be confused with bitwise OR |\n    'closure-params': {\n      pattern: /\\|[^|]*\\|(?=\\s*[{-])/,\n      inside: {\n        punctuation: /[|:,]/,\n        operator: /[&*]/\n      }\n    },\n    punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n    operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n  }\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,IAAjB,CACAA,IAAI,CAACC,WAAL,CAAmB,MAAnB,CACAD,IAAI,CAACE,OAAL,CAAe,EAAf,CACA,QAASF,KAAT,CAAcG,KAAd,CAAqB,CACnB;AACF;AACA;AACA;AACA;AACA,EACEA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAuB,CACrBK,OAAO,CAAE,CACP,CACEC,OAAO,CAAE,2BADX,CAEEC,UAAU,CAAE,IAFd,CADO,CAKP,CACED,OAAO,CAAE,kBADX,CAEEC,UAAU,CAAE,IAFd,CALO,CADY,CAWrBC,MAAM,CAAE,CACN,CACEF,OAAO,CAAE,sCADX,CAEEG,MAAM,CAAE,IAFV,CADM,CAKN,CACEH,OAAO,CAAE,yBADX,CAEEG,MAAM,CAAE,IAFV,CALM,CAXa,CAqBrBC,IAAI,CAAE,CACJJ,OAAO,CAAE,uEADL,CAEJK,KAAK,CAAE,QAFH,CArBe,CAyBrB,sBAAuB,CACrBL,OAAO,CAAE,WADY,CAErBK,KAAK,CAAE,QAFc,CAzBF,CA6BrBC,OAAO,CAAE,4TA7BY,CA8BrBC,SAAS,CAAE,CACTP,OAAO,CAAE,YADA,CAETG,MAAM,CAAE,IAFC,CAGTE,KAAK,CAAE,WAHE,CA9BU,CAmCrBG,QAAQ,CAAE,CACR,cADQ,CACQ;AAChB,kBAFQ,CAnCW,CAuCrB,cAAe,CACbR,OAAO,CAAE,MADI,CAEbK,KAAK,CAAE,UAFM,CAvCM,CA2CrB;AACAI,MAAM,CAAE,iKA5Ca,CA6CrB;AACA,iBAAkB,CAChBT,OAAO,CAAE,sBADO,CAEhBU,MAAM,CAAE,CACNC,WAAW,CAAE,OADP,CAENC,QAAQ,CAAE,MAFJ,CAFQ,CA9CG,CAqDrBD,WAAW,CAAE,kCArDQ,CAsDrBC,QAAQ,CAAE,qDAtDW,CAAvB,CAwDD"},"metadata":{},"sourceType":"module"}