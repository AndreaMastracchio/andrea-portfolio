{"ast":null,"code":"'use strict';module.exports=less;less.displayName='less';less.aliases=[];function less(Prism){/* FIXME :\n:extend() is not handled specifically : its highlighting is buggy.\nMixin usage must be inside a ruleset to be highlighted.\nAt-rules (e.g. import) containing interpolations are buggy.\nDetached rulesets are highlighted as at-rules.\nA comment before a mixin usage prevents the latter to be properly highlighted.\n*/Prism.languages.less=Prism.languages.extend('css',{comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:true}],atrule:{pattern:/@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,inside:{punctuation:/[:()]/}},// selectors and mixins are considered the same\nselector:{pattern:/(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,inside:{// mixin parameters\nvariable:/@+[\\w-]+/}},property:/(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,operator:/[+\\-*\\/]/});Prism.languages.insertBefore('less','property',{variable:[// Variable declaration (the colon must be consumed!)\n{pattern:/@[\\w-]+\\s*:/,inside:{punctuation:/:/}},// Variable usage\n/@@?[\\w-]+/],'mixin-usage':{pattern:/([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,lookbehind:true,alias:'function'}});}","map":{"version":3,"names":["module","exports","less","displayName","aliases","Prism","languages","extend","comment","pattern","lookbehind","atrule","inside","punctuation","selector","variable","property","operator","insertBefore","alias"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/less.js"],"sourcesContent":["'use strict'\n\nmodule.exports = less\nless.displayName = 'less'\nless.aliases = []\nfunction less(Prism) {\n  /* FIXME :\n:extend() is not handled specifically : its highlighting is buggy.\nMixin usage must be inside a ruleset to be highlighted.\nAt-rules (e.g. import) containing interpolations are buggy.\nDetached rulesets are highlighted as at-rules.\nA comment before a mixin usage prevents the latter to be properly highlighted.\n*/\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^|[^\\\\])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    atrule: {\n      pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n    operator: /[+\\-*\\/]/\n  })\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [\n      // Variable declaration (the colon must be consumed!)\n      {\n        pattern: /@[\\w-]+\\s*:/,\n        inside: {\n          punctuation: /:/\n        }\n      }, // Variable usage\n      /@@?[\\w-]+/\n    ],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  })\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,IAAjB,CACAA,IAAI,CAACC,WAAL,CAAmB,MAAnB,CACAD,IAAI,CAACE,OAAL,CAAe,EAAf,CACA,QAASF,KAAT,CAAcG,KAAd,CAAqB,CACnB;AACF;AACA;AACA;AACA;AACA;AACA,EACEA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,KAAvB,CAA8B,CACnDC,OAAO,CAAE,CACP,kBADO,CAEP,CACEC,OAAO,CAAE,iBADX,CAEEC,UAAU,CAAE,IAFd,CAFO,CAD0C,CAQnDC,MAAM,CAAE,CACNF,OAAO,CAAE,6CADH,CAENG,MAAM,CAAE,CACNC,WAAW,CAAE,OADP,CAFF,CAR2C,CAcnD;AACAC,QAAQ,CAAE,CACRL,OAAO,CAAE,wEADD,CAERG,MAAM,CAAE,CACN;AACAG,QAAQ,CAAE,UAFJ,CAFA,CAfyC,CAsBnDC,QAAQ,CAAE,0CAtByC,CAuBnDC,QAAQ,CAAE,UAvByC,CAA9B,CAAvB,CAyBAZ,KAAK,CAACC,SAAN,CAAgBY,YAAhB,CAA6B,MAA7B,CAAqC,UAArC,CAAiD,CAC/CH,QAAQ,CAAE,CACR;AACA,CACEN,OAAO,CAAE,aADX,CAEEG,MAAM,CAAE,CACNC,WAAW,CAAE,GADP,CAFV,CAFQ,CAOL;AACH,WARQ,CADqC,CAW/C,cAAe,CACbJ,OAAO,CAAE,sCADI,CAEbC,UAAU,CAAE,IAFC,CAGbS,KAAK,CAAE,UAHM,CAXgC,CAAjD,EAiBD"},"metadata":{},"sourceType":"module"}