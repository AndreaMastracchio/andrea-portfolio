{"ast":null,"code":"'use strict';module.exports=lisp;lisp.displayName='lisp';lisp.aliases=[];function lisp(Prism){;(function(Prism){// Functions to construct regular expressions\n// simple form\n// e.g. (interactive ... or (interactive)\nfunction simple_form(name){return RegExp('(\\\\()'+name+'(?=[\\\\s\\\\)])');}// booleans and numbers\nfunction primitive(pattern){return RegExp('([\\\\s([])'+pattern+'(?=[\\\\s)])');}// Patterns in regular expressions\n// Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n// & and : are excluded as they are usually used for special purposes\nvar symbol='[-+*/_~!@$%^=<>{}\\\\w]+';// symbol starting with & used in function arguments\nvar marker='&'+symbol;// Open parenthesis for look-behind\nvar par='(\\\\()';var endpar='(?=\\\\))';// End the pattern with look-ahead space\nvar space='(?=\\\\s)';var language={// Three or four semicolons are considered a heading.\n// See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\nheading:{pattern:/;;;.*/,alias:['comment','title']},comment:/;.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:true,inside:{argument:/[-A-Z]+(?=[.,\\s])/,symbol:RegExp('`'+symbol+\"'\")}},'quoted-symbol':{pattern:RegExp(\"#?'\"+symbol),alias:['variable','symbol']},'lisp-property':{pattern:RegExp(':'+symbol),alias:'property'},splice:{pattern:RegExp(',@?'+symbol),alias:['symbol','variable']},keyword:[{pattern:RegExp(par+'(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)'+space),lookbehind:true},{pattern:RegExp(par+'(?:for|do|collect|return|finally|append|concat|in|by)'+space),lookbehind:true}],declare:{pattern:simple_form('declare'),lookbehind:true,alias:'keyword'},interactive:{pattern:simple_form('interactive'),lookbehind:true,alias:'keyword'},boolean:{pattern:primitive('(?:t|nil)'),lookbehind:true},number:{pattern:primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),lookbehind:true},defvar:{pattern:RegExp(par+'def(?:var|const|custom|group)\\\\s+'+symbol),lookbehind:true,inside:{keyword:/^def[a-z]+/,variable:RegExp(symbol)}},defun:{pattern:RegExp(par+'(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+'+symbol+'\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'),lookbehind:true,inside:{keyword:/^(?:cl-)?def\\S+/,// See below, this property needs to be defined later so that it can\n// reference the language object.\narguments:null,function:{pattern:RegExp('(^\\\\s)'+symbol),lookbehind:true},punctuation:/[()]/}},lambda:{pattern:RegExp(par+'lambda\\\\s+\\\\((?:&?'+symbol+'\\\\s*)*\\\\)'),lookbehind:true,inside:{keyword:/^lambda/,// See below, this property needs to be defined later so that it can\n// reference the language object.\narguments:null,punctuation:/[()]/}},car:{pattern:RegExp(par+symbol),lookbehind:true},punctuation:[// open paren, brackets, and close paren\n/(['`,]?\\(|[)\\[\\]])/,// cons\n{pattern:/(\\s)\\.(?=\\s)/,lookbehind:true}]};var arg={'lisp-marker':RegExp(marker),rest:{argument:{pattern:RegExp(symbol),alias:'variable'},varform:{pattern:RegExp(par+symbol+'\\\\s+\\\\S[\\\\s\\\\S]*'+endpar),lookbehind:true,inside:{string:language.string,boolean:language.boolean,number:language.number,symbol:language.symbol,punctuation:/[()]/}}}};var forms='\\\\S+(?:\\\\s+\\\\S+)*';var arglist={pattern:RegExp(par+'[\\\\s\\\\S]*'+endpar),lookbehind:true,inside:{'rest-vars':{pattern:RegExp('&(?:rest|body)\\\\s+'+forms),inside:arg},'other-marker-vars':{pattern:RegExp('&(?:optional|aux)\\\\s+'+forms),inside:arg},keys:{pattern:RegExp('&key\\\\s+'+forms+'(?:\\\\s+&allow-other-keys)?'),inside:arg},argument:{pattern:RegExp(symbol),alias:'variable'},punctuation:/[()]/}};language['lambda'].inside.arguments=arglist;language['defun'].inside.arguments=Prism.util.clone(arglist);language['defun'].inside.arguments.inside.sublist=arglist;Prism.languages.lisp=language;Prism.languages.elisp=language;Prism.languages.emacs=language;Prism.languages['emacs-lisp']=language;})(Prism);}","map":{"version":3,"names":["module","exports","lisp","displayName","aliases","Prism","simple_form","name","RegExp","primitive","pattern","symbol","marker","par","endpar","space","language","heading","alias","comment","string","greedy","inside","argument","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","arg","rest","varform","forms","arglist","keys","util","clone","sublist","languages","elisp","emacs"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/lisp.js"],"sourcesContent":["'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function(Prism) {\n    // Functions to construct regular expressions\n    // simple form\n    // e.g. (interactive ... or (interactive)\n    function simple_form(name) {\n      return RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])')\n    } // booleans and numbers\n    function primitive(pattern) {\n      return RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])')\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+' // symbol starting with & used in function arguments\n    var marker = '&' + symbol // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))' // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: RegExp(\n            par +\n              '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: RegExp(\n            par +\n              '(?:for|do|collect|return|finally|append|concat|in|by)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form('declare'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form('interactive'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive('(?:t|nil)'),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(\n          par +\n            '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n            symbol +\n            '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(['`,]?\\(|[)\\[\\]])/, // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      rest: {\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        varform: {\n          pattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n          lookbehind: true,\n          inside: {\n            string: language.string,\n            boolean: language.boolean,\n            number: language.number,\n            symbol: language.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}