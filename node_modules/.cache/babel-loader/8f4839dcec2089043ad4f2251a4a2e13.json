{"ast":null,"code":"module.exports=function(hljs){var IDENT_RE='[\\\\w-]+';// yes, Less identifiers may begin with a digit\nvar INTERP_IDENT_RE='('+IDENT_RE+'|@{'+IDENT_RE+'})';/* Generic Modes */var RULES=[],VALUE=[];// forward def. for recursive modes\nvar STRING_MODE=function STRING_MODE(c){return{// Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\nclassName:'string',begin:'~?'+c+'.*?'+c};};var IDENT_MODE=function IDENT_MODE(name,begin,relevance){return{className:name,begin:begin,relevance:relevance};};var PARENS_MODE={// used only to properly balance nested parens inside mixin call, def. arg list\nbegin:'\\\\(',end:'\\\\)',contains:VALUE,relevance:0};// generic Less highlighter (used almost everywhere except selectors):\nVALUE.push(hljs.C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,STRING_MODE(\"'\"),STRING_MODE('\"'),hljs.CSS_NUMBER_MODE,// fixme: it does not include dot for numbers like .5em :(\n{begin:'(url|data-uri)\\\\(',starts:{className:'string',end:'[\\\\)\\\\n]',excludeEnd:true}},IDENT_MODE('number','#[0-9A-Fa-f]+\\\\b'),PARENS_MODE,IDENT_MODE('variable','@@?'+IDENT_RE,10),IDENT_MODE('variable','@{'+IDENT_RE+'}'),IDENT_MODE('built_in','~?`[^`]*?`'),// inline javascript (or whatever host language) *multiline* string\n{// @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\nclassName:'attribute',begin:IDENT_RE+'\\\\s*:',end:':',returnBegin:true,excludeEnd:true},{className:'meta',begin:'!important'});var VALUE_WITH_RULESETS=VALUE.concat({begin:'{',end:'}',contains:RULES});var MIXIN_GUARD_MODE={beginKeywords:'when',endsWithParent:true,contains:[{beginKeywords:'and not'}].concat(VALUE)// using this form to override VALUE’s 'function' match\n};/* Rule-Level Modes */var RULE_MODE={begin:INTERP_IDENT_RE+'\\\\s*:',returnBegin:true,end:'[;}]',relevance:0,contains:[{className:'attribute',begin:INTERP_IDENT_RE,end:':',excludeEnd:true,starts:{endsWithParent:true,illegal:'[<=$]',relevance:0,contains:VALUE}}]};var AT_RULE_MODE={className:'keyword',begin:'@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',starts:{end:'[;{}]',returnEnd:true,contains:VALUE,relevance:0}};// variable definitions and calls\nvar VAR_RULE_MODE={className:'variable',variants:[// using more strict pattern for higher relevance to increase chances of Less detection.\n// this is *the only* Less specific statement used in most of the sources, so...\n// (we’ll still often loose to the css-parser unless there's '//' comment,\n// simply because 1 variable just can't beat 99 properties :)\n{begin:'@'+IDENT_RE+'\\\\s*:',relevance:15},{begin:'@'+IDENT_RE}],starts:{end:'[;}]',returnEnd:true,contains:VALUE_WITH_RULESETS}};var SELECTOR_MODE={// first parse unambiguous selectors (i.e. those not starting with tag)\n// then fall into the scary lookahead-discriminator variant.\n// this mode also handles mixin definitions and calls\nvariants:[{begin:'[\\\\.#:&\\\\[>]',end:'[;{}]'// mixin calls end with ';'\n},{begin:INTERP_IDENT_RE,end:'{'}],returnBegin:true,returnEnd:true,illegal:'[<=\\'$\"]',relevance:0,contains:[hljs.C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,MIXIN_GUARD_MODE,IDENT_MODE('keyword','all\\\\b'),IDENT_MODE('variable','@{'+IDENT_RE+'}'),// otherwise it’s identified as tag\nIDENT_MODE('selector-tag',INTERP_IDENT_RE+'%?',0),// '%' for more consistent coloring of @keyframes \"tags\"\nIDENT_MODE('selector-id','#'+INTERP_IDENT_RE),IDENT_MODE('selector-class','\\\\.'+INTERP_IDENT_RE,0),IDENT_MODE('selector-tag','&',0),{className:'selector-attr',begin:'\\\\[',end:'\\\\]'},{className:'selector-pseudo',begin:/:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},{begin:'\\\\(',end:'\\\\)',contains:VALUE_WITH_RULESETS},// argument list of parametric mixins\n{begin:'!important'}// eat !important after mixin call or it will be colored as tag\n]};RULES.push(hljs.C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,AT_RULE_MODE,VAR_RULE_MODE,RULE_MODE,SELECTOR_MODE);return{case_insensitive:true,illegal:'[=>\\'/<($\"]',contains:RULES};};","map":{"version":3,"names":["module","exports","hljs","IDENT_RE","INTERP_IDENT_RE","RULES","VALUE","STRING_MODE","c","className","begin","IDENT_MODE","name","relevance","PARENS_MODE","end","contains","push","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","CSS_NUMBER_MODE","starts","excludeEnd","returnBegin","VALUE_WITH_RULESETS","concat","MIXIN_GUARD_MODE","beginKeywords","endsWithParent","RULE_MODE","illegal","AT_RULE_MODE","returnEnd","VAR_RULE_MODE","variants","SELECTOR_MODE","case_insensitive"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/highlight.js/lib/languages/less.js"],"sourcesContent":["module.exports = function(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    {\n      begin: '(url|data-uri)\\\\(',\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    },\n    IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    },\n    {\n      className: 'meta',\n      begin: '!important'\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:', returnBegin: true, end: '[;}]',\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, illegal: '[<=$]',\n          relevance: 0,\n          contains: VALUE\n        }\n      }\n    ]\n  };\n\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we’ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE, end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag\n      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('selector-tag',  '&', 0),\n      {className: 'selector-attr', begin: '\\\\[', end: '\\\\]'},\n      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    RULE_MODE,\n    SELECTOR_MODE\n  );\n\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}