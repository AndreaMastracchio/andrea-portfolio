{"ast":null,"code":"'use strict';module.exports=jsx;jsx.displayName='jsx';jsx.aliases=[];function jsx(Prism){;(function(Prism){var javascript=Prism.util.clone(Prism.languages.javascript);Prism.languages.jsx=Prism.languages.extend('markup',javascript);Prism.languages.jsx.tag.pattern=/<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;Prism.languages.jsx.tag.inside['tag'].pattern=/^<\\/?[^\\s>\\/]*/i;Prism.languages.jsx.tag.inside['attr-value'].pattern=/=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;Prism.languages.jsx.tag.inside['tag'].inside['class-name']=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;Prism.languages.insertBefore('inside','attr-name',{spread:{pattern:/\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,inside:{punctuation:/\\.{3}|[{}.]/,'attr-value':/\\w+/}}},Prism.languages.jsx.tag);Prism.languages.insertBefore('inside','attr-value',{script:{// Allow for two levels of nesting\npattern:/=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,inside:{'script-punctuation':{pattern:/^=(?={)/,alias:'punctuation'},rest:Prism.languages.jsx},alias:'language-javascript'}},Prism.languages.jsx.tag);// The following will handle plain text inside tags\nvar stringifyToken=function stringifyToken(token){if(!token){return'';}if(typeof token==='string'){return token;}if(typeof token.content==='string'){return token.content;}return token.content.map(stringifyToken).join('');};var walkTokens=function walkTokens(tokens){var openedTags=[];for(var i=0;i<tokens.length;i++){var token=tokens[i];var notTagNorBrace=false;if(typeof token!=='string'){if(token.type==='tag'&&token.content[0]&&token.content[0].type==='tag'){// We found a tag, now find its kind\nif(token.content[0].content[0].content==='</'){// Closing tag\nif(openedTags.length>0&&openedTags[openedTags.length-1].tagName===stringifyToken(token.content[0].content[1])){// Pop matching opening tag\nopenedTags.pop();}}else{if(token.content[token.content.length-1].content==='/>'){// Autoclosed tag, ignore\n}else{// Opening tag\nopenedTags.push({tagName:stringifyToken(token.content[0].content[1]),openedBraces:0});}}}else if(openedTags.length>0&&token.type==='punctuation'&&token.content==='{'){// Here we might have entered a JSX context inside a tag\nopenedTags[openedTags.length-1].openedBraces++;}else if(openedTags.length>0&&openedTags[openedTags.length-1].openedBraces>0&&token.type==='punctuation'&&token.content==='}'){// Here we might have left a JSX context inside a tag\nopenedTags[openedTags.length-1].openedBraces--;}else{notTagNorBrace=true;}}if(notTagNorBrace||typeof token==='string'){if(openedTags.length>0&&openedTags[openedTags.length-1].openedBraces===0){// Here we are inside a tag, and not inside a JSX context.\n// That's plain text: drop any tokens matched.\nvar plainText=stringifyToken(token);// And merge text with adjacent text\nif(i<tokens.length-1&&(typeof tokens[i+1]==='string'||tokens[i+1].type==='plain-text')){plainText+=stringifyToken(tokens[i+1]);tokens.splice(i+1,1);}if(i>0&&(typeof tokens[i-1]==='string'||tokens[i-1].type==='plain-text')){plainText=stringifyToken(tokens[i-1])+plainText;tokens.splice(i-1,1);i--;}tokens[i]=new Prism.Token('plain-text',plainText,null,plainText);}}if(token.content&&typeof token.content!=='string'){walkTokens(token.content);}}};Prism.hooks.add('after-tokenize',function(env){if(env.language!=='jsx'&&env.language!=='tsx'){return;}walkTokens(env.tokens);});})(Prism);}","map":{"version":3,"names":["module","exports","jsx","displayName","aliases","Prism","javascript","util","clone","languages","extend","tag","pattern","inside","insertBefore","spread","punctuation","script","alias","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","Token","hooks","add","env","language"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/jsx.js"],"sourcesContent":["'use strict'\n\nmodule.exports = jsx\njsx.displayName = 'jsx'\njsx.aliases = []\nfunction jsx(Prism) {\n  ;(function(Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript)\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript)\n    Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i\n    Prism.languages.jsx.tag.inside[\n      'attr-value'\n    ].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i\n    Prism.languages.jsx.tag.inside['tag'].inside[\n      'class-name'\n    ] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-name',\n      {\n        spread: {\n          pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n          inside: {\n            punctuation: /\\.{3}|[{}.]/,\n            'attr-value': /\\w+/\n          }\n        }\n      },\n      Prism.languages.jsx.tag\n    )\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        script: {\n          // Allow for two levels of nesting\n          pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n          inside: {\n            'script-punctuation': {\n              pattern: /^=(?={)/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.jsx\n          },\n          alias: 'language-javascript'\n        }\n      },\n      Prism.languages.jsx.tag\n    ) // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n      if (!token) {\n        return ''\n      }\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function(tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{'\n          ) {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            tokens[i] = new Prism.Token(\n              'plain-text',\n              plainText,\n              null,\n              plainText\n            )\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}