{"ast":null,"code":"module.exports=// We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\nfunction(hljs){// Regular expression for Ada numeric literals.\n// stolen form the VHDL highlighter\n// Decimal literal:\nvar INTEGER_RE='\\\\d(_|\\\\d)*';var EXPONENT_RE='[eE][-+]?'+INTEGER_RE;var DECIMAL_LITERAL_RE=INTEGER_RE+'(\\\\.'+INTEGER_RE+')?'+'('+EXPONENT_RE+')?';// Based literal:\nvar BASED_INTEGER_RE='\\\\w+';var BASED_LITERAL_RE=INTEGER_RE+'#'+BASED_INTEGER_RE+'(\\\\.'+BASED_INTEGER_RE+')?'+'#'+'('+EXPONENT_RE+')?';var NUMBER_RE='\\\\b('+BASED_LITERAL_RE+'|'+DECIMAL_LITERAL_RE+')';// Identifier regex\nvar ID_REGEX='[A-Za-z](_?[A-Za-z0-9.])*';// bad chars, only allowed in literals\nvar BAD_CHARS='[]{}%#\\'\\\"';// Ada doesn't have block comments, only line comments\nvar COMMENTS=hljs.COMMENT('--','$');// variable declarations of the form\n// Foo : Bar := Baz;\n// where only Bar will be highlighted\nvar VAR_DECLS={// TODO: These spaces are not required by the Ada syntax\n// however, I have yet to see handwritten Ada code where\n// someone does not put spaces around :\nbegin:'\\\\s+:\\\\s+',end:'\\\\s*(:=|;|\\\\)|=>|$)',// endsWithParent: true,\n// returnBegin: true,\nillegal:BAD_CHARS,contains:[{// workaround to avoid highlighting\n// named loops and declare blocks\nbeginKeywords:'loop for declare others',endsParent:true},{// properly highlight all modifiers\nclassName:'keyword',beginKeywords:'not null constant access function procedure in out aliased exception'},{className:'type',begin:ID_REGEX,endsParent:true,relevance:0}]};return{case_insensitive:true,keywords:{keyword:'abort else new return abs elsif not reverse abstract end '+'accept entry select access exception of separate aliased exit or some '+'all others subtype and for out synchronized array function overriding '+'at tagged generic package task begin goto pragma terminate '+'body private then if procedure type case in protected constant interface '+'is raise use declare range delay limited record when delta loop rem while '+'digits renames with do mod requeue xor',literal:'True False'},contains:[COMMENTS,// strings \"foobar\"\n{className:'string',begin:/\"/,end:/\"/,contains:[{begin:/\"\"/,relevance:0}]},// characters ''\n{// character literals always contain one char\nclassName:'string',begin:/'.'/},{// number literals\nclassName:'number',begin:NUMBER_RE,relevance:0},{// Attributes\nclassName:'symbol',begin:\"'\"+ID_REGEX},{// package definition, maybe inside generic\nclassName:'title',begin:'(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?',end:'(is|$)',keywords:'package body',excludeBegin:true,excludeEnd:true,illegal:BAD_CHARS},{// function/procedure declaration/definition\n// maybe inside generic\nbegin:'(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+',end:'(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',keywords:'overriding function procedure with is renames return',// we need to re-match the 'function' keyword, so that\n// the title mode below matches only exactly once\nreturnBegin:true,contains:[COMMENTS,{// name of the function/procedure\nclassName:'title',begin:'(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',end:'(\\\\(|\\\\s+|$)',excludeBegin:true,excludeEnd:true,illegal:BAD_CHARS},// 'self'\n// // parameter types\nVAR_DECLS,{// return type\nclassName:'type',begin:'\\\\breturn\\\\s+',end:'(\\\\s+|;|$)',keywords:'return',excludeBegin:true,excludeEnd:true,// we are done with functions\nendsParent:true,illegal:BAD_CHARS}]},{// new type declarations\n// maybe inside generic\nclassName:'type',begin:'\\\\b(sub)?type\\\\s+',end:'\\\\s+',keywords:'type',excludeBegin:true,illegal:BAD_CHARS},// see comment above the definition\nVAR_DECLS// no markup\n// relevance boosters for small snippets\n// {begin: '\\\\s*=>\\\\s*'},\n// {begin: '\\\\s*:=\\\\s*'},\n// {begin: '\\\\s+:=\\\\s+'},\n]};};","map":{"version":3,"names":["module","exports","hljs","INTEGER_RE","EXPONENT_RE","DECIMAL_LITERAL_RE","BASED_INTEGER_RE","BASED_LITERAL_RE","NUMBER_RE","ID_REGEX","BAD_CHARS","COMMENTS","COMMENT","VAR_DECLS","begin","end","illegal","contains","beginKeywords","endsParent","className","relevance","case_insensitive","keywords","keyword","literal","excludeBegin","excludeEnd","returnBegin"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/highlight.js/lib/languages/ada.js"],"sourcesContent":["module.exports = // We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n\nfunction(hljs) {\n    // Regular expression for Ada numeric literals.\n    // stolen form the VHDL highlighter\n\n    // Decimal literal:\n    var INTEGER_RE = '\\\\d(_|\\\\d)*';\n    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n    // Based literal:\n    var BASED_INTEGER_RE = '\\\\w+';\n    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n    var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n    // Identifier regex\n    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n    // bad chars, only allowed in literals\n    var BAD_CHARS = '[]{}%#\\'\\\"'\n\n    // Ada doesn't have block comments, only line comments\n    var COMMENTS = hljs.COMMENT('--', '$');\n\n    // variable declarations of the form\n    // Foo : Bar := Baz;\n    // where only Bar will be highlighted\n    var VAR_DECLS = {\n        // TODO: These spaces are not required by the Ada syntax\n        // however, I have yet to see handwritten Ada code where\n        // someone does not put spaces around :\n        begin: '\\\\s+:\\\\s+', end: '\\\\s*(:=|;|\\\\)|=>|$)',\n        // endsWithParent: true,\n        // returnBegin: true,\n        illegal: BAD_CHARS,\n        contains: [\n            {\n                // workaround to avoid highlighting\n                // named loops and declare blocks\n                beginKeywords: 'loop for declare others',\n                endsParent: true,\n            },\n            {\n                // properly highlight all modifiers\n                className: 'keyword',\n                beginKeywords: 'not null constant access function procedure in out aliased exception'\n            },\n            {\n                className: 'type',\n                begin: ID_REGEX,\n                endsParent: true,\n                relevance: 0,\n            }\n        ]\n    };\n\n    return {\n        case_insensitive: true,\n        keywords: {\n            keyword:\n                'abort else new return abs elsif not reverse abstract end ' +\n                'accept entry select access exception of separate aliased exit or some ' +\n                'all others subtype and for out synchronized array function overriding ' +\n                'at tagged generic package task begin goto pragma terminate ' +\n                'body private then if procedure type case in protected constant interface ' +\n                'is raise use declare range delay limited record when delta loop rem while ' +\n                'digits renames with do mod requeue xor',\n            literal:\n                'True False',\n        },\n        contains: [\n            COMMENTS,\n            // strings \"foobar\"\n            {\n                className: 'string',\n                begin: /\"/, end: /\"/,\n                contains: [{begin: /\"\"/, relevance: 0}]\n            },\n            // characters ''\n            {\n                // character literals always contain one char\n                className: 'string',\n                begin: /'.'/\n            },\n            {\n                // number literals\n                className: 'number',\n                begin: NUMBER_RE,\n                relevance: 0\n            },\n            {\n                // Attributes\n                className: 'symbol',\n                begin: \"'\" + ID_REGEX,\n            },\n            {\n                // package definition, maybe inside generic\n                className: 'title',\n                begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?', end: '(is|$)',\n                keywords: 'package body',\n                excludeBegin: true,\n                excludeEnd: true,\n                illegal: BAD_CHARS\n            },\n            {\n                // function/procedure declaration/definition\n                // maybe inside generic\n                begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+', end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n                keywords: 'overriding function procedure with is renames return',\n                // we need to re-match the 'function' keyword, so that\n                // the title mode below matches only exactly once\n                returnBegin: true,\n                contains:\n                [\n                    COMMENTS,\n                    {\n                        // name of the function/procedure\n                        className: 'title',\n                        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n                        end: '(\\\\(|\\\\s+|$)',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        illegal: BAD_CHARS\n                    },\n                    // 'self'\n                    // // parameter types\n                    VAR_DECLS,\n                    {\n                        // return type\n                        className: 'type',\n                        begin: '\\\\breturn\\\\s+', end: '(\\\\s+|;|$)',\n                        keywords: 'return',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        // we are done with functions\n                        endsParent: true,\n                        illegal: BAD_CHARS\n\n                    },\n                ]\n            },\n            {\n                // new type declarations\n                // maybe inside generic\n                className: 'type',\n                begin: '\\\\b(sub)?type\\\\s+', end: '\\\\s+',\n                keywords: 'type',\n                excludeBegin: true,\n                illegal: BAD_CHARS\n            },\n\n            // see comment above the definition\n            VAR_DECLS,\n\n            // no markup\n            // relevance boosters for small snippets\n            // {begin: '\\\\s*=>\\\\s*'},\n            // {begin: '\\\\s*:=\\\\s*'},\n            // {begin: '\\\\s+:=\\\\s+'},\n        ]\n    };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}