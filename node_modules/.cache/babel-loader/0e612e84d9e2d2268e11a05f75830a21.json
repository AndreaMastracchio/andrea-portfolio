{"ast":null,"code":"'use strict';module.exports=http;http.displayName='http';http.aliases=[];function http(Prism){;(function(Prism){Prism.languages.http={'request-line':{pattern:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,inside:{// HTTP Verb\nproperty:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,// Path or query argument\n'attr-name':/:\\w+/}},'response-status':{pattern:/^HTTP\\/1.[01] \\d+.*/m,inside:{// Status, e.g. 200 OK\nproperty:{pattern:/(^HTTP\\/1.[01] )\\d+.*/i,lookbehind:true}}},// HTTP header name\n'header-name':{pattern:/^[\\w-]+:(?=.)/m,alias:'keyword'}};// Create a mapping of Content-Type headers to language definitions\nvar langs=Prism.languages;var httpLanguages={'application/javascript':langs.javascript,'application/json':langs.json||langs.javascript,'application/xml':langs.xml,'text/xml':langs.xml,'text/html':langs.html,'text/css':langs.css};// Declare which types can also be suffixes\nvar suffixTypes={'application/json':true,'application/xml':true};/**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */function getSuffixPattern(contentType){var suffix=contentType.replace(/^[a-z]+\\//,'');var suffixPattern='\\\\w+/(?:[\\\\w.-]+\\\\+)+'+suffix+'(?![+\\\\w.-])';return'(?:'+contentType+'|'+suffixPattern+')';}// Insert each content type parser that has its associated language\n// currently loaded.\nvar options;for(var contentType in httpLanguages){if(httpLanguages[contentType]){options=options||{};var pattern=suffixTypes[contentType]?getSuffixPattern(contentType):contentType;options[contentType]={pattern:RegExp('(content-type:\\\\s*'+pattern+'[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*','i'),lookbehind:true,inside:{rest:httpLanguages[contentType]}};}}if(options){Prism.languages.insertBefore('http','header-name',options);}})(Prism);}","map":{"version":3,"names":["module","exports","http","displayName","aliases","Prism","languages","pattern","inside","property","lookbehind","alias","langs","httpLanguages","javascript","json","xml","html","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","options","RegExp","rest","insertBefore"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/http.js"],"sourcesContent":["'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function(Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Verb\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n          // Path or query argument\n          'attr-name': /:\\w+/\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\n        inside: {\n          // Status, e.g. 200 OK\n          property: {\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n            lookbehind: true\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType] = {\n          pattern: RegExp(\n            '(content-type:\\\\s*' +\n              pattern +\n              '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\n            'i'\n          ),\n          lookbehind: true,\n          inside: {\n            rest: httpLanguages[contentType]\n          }\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options)\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA,aAEAA,MAAM,CAACC,OAAP,CAAiBC,IAAjB,CACAA,IAAI,CAACC,WAAL,CAAmB,MAAnB,CACAD,IAAI,CAACE,OAAL,CAAe,EAAf,CACA,QAASF,KAAT,CAAcG,KAAd,CAAqB,CACnB,CAAC,CAAC,SAASA,KAAT,CAAgB,CAChBA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAuB,CACrB,eAAgB,CACdK,OAAO,CAAE,6FADK,CAEdC,MAAM,CAAE,CACN;AACAC,QAAQ,CAAE,wDAFJ,CAGN;AACA,YAAa,MAJP,CAFM,CADK,CAUrB,kBAAmB,CACjBF,OAAO,CAAE,sBADQ,CAEjBC,MAAM,CAAE,CACN;AACAC,QAAQ,CAAE,CACRF,OAAO,CAAE,wBADD,CAERG,UAAU,CAAE,IAFJ,CAFJ,CAFS,CAVE,CAoBrB;AACA,cAAe,CACbH,OAAO,CAAE,gBADI,CAEbI,KAAK,CAAE,SAFM,CArBM,CAAvB,CAyBE;AACF,GAAIC,MAAK,CAAGP,KAAK,CAACC,SAAlB,CACA,GAAIO,cAAa,CAAG,CAClB,yBAA0BD,KAAK,CAACE,UADd,CAElB,mBAAoBF,KAAK,CAACG,IAAN,EAAcH,KAAK,CAACE,UAFtB,CAGlB,kBAAmBF,KAAK,CAACI,GAHP,CAIlB,WAAYJ,KAAK,CAACI,GAJA,CAKlB,YAAaJ,KAAK,CAACK,IALD,CAMlB,WAAYL,KAAK,CAACM,GANA,CAApB,CAOE;AACF,GAAIC,YAAW,CAAG,CAChB,mBAAoB,IADJ,CAEhB,kBAAmB,IAFH,CAAlB,CAIA;AACJ;AACA;AACA;AACA;AACA,OACI,QAASC,iBAAT,CAA0BC,WAA1B,CAAuC,CACrC,GAAIC,OAAM,CAAGD,WAAW,CAACE,OAAZ,CAAoB,WAApB,CAAiC,EAAjC,CAAb,CACA,GAAIC,cAAa,CAAG,wBAA0BF,MAA1B,CAAmC,cAAvD,CACA,MAAO,MAAQD,WAAR,CAAsB,GAAtB,CAA4BG,aAA5B,CAA4C,GAAnD,CACD,CAAC;AACF;AACA,GAAIC,QAAJ,CACA,IAAK,GAAIJ,YAAT,GAAwBR,cAAxB,CAAuC,CACrC,GAAIA,aAAa,CAACQ,WAAD,CAAjB,CAAgC,CAC9BI,OAAO,CAAGA,OAAO,EAAI,EAArB,CACA,GAAIlB,QAAO,CAAGY,WAAW,CAACE,WAAD,CAAX,CACVD,gBAAgB,CAACC,WAAD,CADN,CAEVA,WAFJ,CAGAI,OAAO,CAACJ,WAAD,CAAP,CAAuB,CACrBd,OAAO,CAAEmB,MAAM,CACb,qBACEnB,OADF,CAEE,wCAHW,CAIb,GAJa,CADM,CAOrBG,UAAU,CAAE,IAPS,CAQrBF,MAAM,CAAE,CACNmB,IAAI,CAAEd,aAAa,CAACQ,WAAD,CADb,CARa,CAAvB,CAYD,CACF,CACD,GAAII,OAAJ,CAAa,CACXpB,KAAK,CAACC,SAAN,CAAgBsB,YAAhB,CAA6B,MAA7B,CAAqC,aAArC,CAAoDH,OAApD,EACD,CACF,CA5EA,EA4EEpB,KA5EF,EA6EF"},"metadata":{},"sourceType":"module"}