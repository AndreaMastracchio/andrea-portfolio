{"ast":null,"code":"'use strict';var refractorMarkupTemplating=require('./markup-templating.js');module.exports=php;php.displayName='php';php.aliases=[];function php(Prism){Prism.register(refractorMarkupTemplating)/**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */;(function(Prism){Prism.languages.php=Prism.languages.extend('clike',{keyword:/\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,boolean:{pattern:/\\b(?:false|true)\\b/i,alias:'constant'},constant:[/\\b[A-Z_][A-Z0-9_]*\\b/,/\\b(?:null)\\b/i],comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:true}});Prism.languages.insertBefore('php','string',{'shell-comment':{pattern:/(^|[^\\\\])#.*/,lookbehind:true,alias:'comment'}});Prism.languages.insertBefore('php','comment',{delimiter:{pattern:/\\?>$|^<\\?(?:php(?=\\s)|=)?/i,alias:'important'}});Prism.languages.insertBefore('php','keyword',{variable:/\\$+(?:\\w+\\b|(?={))/i,package:{pattern:/(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,lookbehind:true,inside:{punctuation:/\\\\/}}});// Must be defined after the function pattern\nPrism.languages.insertBefore('php','operator',{property:{pattern:/(->)[\\w]+/,lookbehind:true}});var string_interpolation={pattern:/{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,lookbehind:true,inside:{rest:Prism.languages.php}};Prism.languages.insertBefore('php','string',{'nowdoc-string':{pattern:/<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,greedy:true,alias:'string',inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\\w*;$/i,alias:'symbol',inside:{punctuation:/^<<<'?|[';]$/}}}},'heredoc-string':{pattern:/<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,greedy:true,alias:'string',inside:{delimiter:{pattern:/^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,alias:'symbol',inside:{punctuation:/^<<<\"?|[\";]$/}},interpolation:string_interpolation// See below\n}},'single-quoted-string':{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,greedy:true,alias:'string'},'double-quoted-string':{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:true,alias:'string',inside:{interpolation:string_interpolation// See below\n}}});// The different types of PHP strings \"replace\" the C-like standard string\ndelete Prism.languages.php['string'];Prism.hooks.add('before-tokenize',function(env){if(!/<\\?/.test(env.code)){return;}var phpPattern=/<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi;Prism.languages['markup-templating'].buildPlaceholders(env,'php',phpPattern);});Prism.hooks.add('after-tokenize',function(env){Prism.languages['markup-templating'].tokenizePlaceholders(env,'php');});})(Prism);}","map":{"version":3,"names":["refractorMarkupTemplating","require","module","exports","php","displayName","aliases","Prism","register","languages","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","delimiter","variable","package","inside","punctuation","property","string_interpolation","rest","greedy","interpolation","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/php.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;(function(Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    })\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    })\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }) // Must be defined after the function pattern\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    })\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    }\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    }) // The different types of PHP strings \"replace\" the C-like standard string\n    delete Prism.languages.php['string']\n    Prism.hooks.add('before-tokenize', function(env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}