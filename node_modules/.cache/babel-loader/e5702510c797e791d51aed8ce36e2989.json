{"ast":null,"code":"'use strict';module.exports=markupTemplating;markupTemplating.displayName='markupTemplating';markupTemplating.aliases=[];function markupTemplating(Prism){;(function(Prism){/**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */function getPlaceholder(language,index){return'___'+language.toUpperCase()+index+'___';}Object.defineProperties(Prism.languages['markup-templating']={},{buildPlaceholders:{/**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */value:function value(env,language,placeholderPattern,replaceFilter){if(env.language!==language){return;}var tokenStack=env.tokenStack=[];env.code=env.code.replace(placeholderPattern,function(match){if(typeof replaceFilter==='function'&&!replaceFilter(match)){return match;}var i=tokenStack.length;var placeholder;// Check for existing strings\nwhile(env.code.indexOf(placeholder=getPlaceholder(language,i))!==-1){++i;}// Create a sparse array\ntokenStack[i]=match;return placeholder;});// Switch the grammar to markup\nenv.grammar=Prism.languages.markup;}},tokenizePlaceholders:{/**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */value:function value(env,language){if(env.language!==language||!env.tokenStack){return;}// Switch the grammar back\nenv.grammar=Prism.languages[language];var j=0;var keys=Object.keys(env.tokenStack);function walkTokens(tokens){for(var i=0;i<tokens.length;i++){// all placeholders are replaced already\nif(j>=keys.length){break;}var token=tokens[i];if(typeof token==='string'||token.content&&typeof token.content==='string'){var k=keys[j];var t=env.tokenStack[k];var s=typeof token==='string'?token:token.content;var placeholder=getPlaceholder(language,k);var index=s.indexOf(placeholder);if(index>-1){++j;var before=s.substring(0,index);var middle=new Prism.Token(language,Prism.tokenize(t,env.grammar),'language-'+language,t);var after=s.substring(index+placeholder.length);var replacement=[];if(before){replacement.push.apply(replacement,walkTokens([before]));}replacement.push(middle);if(after){replacement.push.apply(replacement,walkTokens([after]));}if(typeof token==='string'){tokens.splice.apply(tokens,[i,1].concat(replacement));}else{token.content=replacement;}}}else if(token.content/* && typeof token.content !== 'string' */){walkTokens(token.content);}}return tokens;}walkTokens(env.tokens);}}});})(Prism);}","map":{"version":3,"names":["module","exports","markupTemplating","displayName","aliases","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","i","length","placeholder","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"sources":["/home/andrea/progetti/andrea-portfolio/frontend/node_modules/refractor/lang/markup-templating.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function(Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function(match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}